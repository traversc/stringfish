// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_string_type
std::string get_string_type(SEXP x);
RcppExport SEXP _stringfish_get_string_type(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_string_type(x));
    return rcpp_result_gen;
END_RCPP
}
// materialize
SEXP materialize(SEXP x);
RcppExport SEXP _stringfish_materialize(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(materialize(x));
    return rcpp_result_gen;
END_RCPP
}
// sf_vector
SEXP sf_vector(size_t len);
RcppExport SEXP _stringfish_sf_vector(SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< size_t >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(sf_vector(len));
    return rcpp_result_gen;
END_RCPP
}
// sf_assign
void sf_assign(SEXP x, size_t i, SEXP e);
RcppExport SEXP _stringfish_sf_assign(SEXP xSEXP, SEXP iSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type e(eSEXP);
    sf_assign(x, i, e);
    return R_NilValue;
END_RCPP
}
// sf_iconv
SEXP sf_iconv(SEXP x, std::string from, std::string to);
RcppExport SEXP _stringfish_sf_iconv(SEXP xSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type from(fromSEXP);
    Rcpp::traits::input_parameter< std::string >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(sf_iconv(x, from, to));
    return rcpp_result_gen;
END_RCPP
}
// convert_to_sf
SEXP convert_to_sf(SEXP x);
RcppExport SEXP _stringfish_convert_to_sf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_to_sf(x));
    return rcpp_result_gen;
END_RCPP
}
// sf_nchar
IntegerVector sf_nchar(SEXP x, std::string type);
RcppExport SEXP _stringfish_sf_nchar(SEXP xSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(sf_nchar(x, type));
    return rcpp_result_gen;
END_RCPP
}
// sf_substr
SEXP sf_substr(SEXP x, IntegerVector start, IntegerVector stop);
RcppExport SEXP _stringfish_sf_substr(SEXP xSEXP, SEXP startSEXP, SEXP stopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type stop(stopSEXP);
    rcpp_result_gen = Rcpp::wrap(sf_substr(x, start, stop));
    return rcpp_result_gen;
END_RCPP
}
// c_sf_paste
SEXP c_sf_paste(List dots, SEXP sep);
RcppExport SEXP _stringfish_c_sf_paste(SEXP dotsSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type dots(dotsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sep(sepSEXP);
    rcpp_result_gen = Rcpp::wrap(c_sf_paste(dots, sep));
    return rcpp_result_gen;
END_RCPP
}
// sf_collapse
SEXP sf_collapse(SEXP x, SEXP collapse);
RcppExport SEXP _stringfish_sf_collapse(SEXP xSEXP, SEXP collapseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type collapse(collapseSEXP);
    rcpp_result_gen = Rcpp::wrap(sf_collapse(x, collapse));
    return rcpp_result_gen;
END_RCPP
}
// sf_readLines
SEXP sf_readLines(std::string file, std::string encoding);
RcppExport SEXP _stringfish_sf_readLines(SEXP fileSEXP, SEXP encodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type encoding(encodingSEXP);
    rcpp_result_gen = Rcpp::wrap(sf_readLines(file, encoding));
    return rcpp_result_gen;
END_RCPP
}
// sf_grepl
LogicalVector sf_grepl(SEXP subject, SEXP pattern, std::string encode_mode);
RcppExport SEXP _stringfish_sf_grepl(SEXP subjectSEXP, SEXP patternSEXP, SEXP encode_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string >::type encode_mode(encode_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(sf_grepl(subject, pattern, encode_mode));
    return rcpp_result_gen;
END_RCPP
}
// sf_gsub
SEXP sf_gsub(SEXP subject, SEXP pattern, SEXP replacement, std::string encode_mode);
RcppExport SEXP _stringfish_sf_gsub(SEXP subjectSEXP, SEXP patternSEXP, SEXP replacementSEXP, SEXP encode_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type subject(subjectSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< SEXP >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< std::string >::type encode_mode(encode_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(sf_gsub(subject, pattern, replacement, encode_mode));
    return rcpp_result_gen;
END_RCPP
}
// random_strings
SEXP random_strings(const int N, const int string_size, std::string charset, std::string vector_mode);
RcppExport SEXP _stringfish_random_strings(SEXP NSEXP, SEXP string_sizeSEXP, SEXP charsetSEXP, SEXP vector_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int >::type string_size(string_sizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type charset(charsetSEXP);
    Rcpp::traits::input_parameter< std::string >::type vector_mode(vector_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(random_strings(N, string_size, charset, vector_mode));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stringfish_get_string_type", (DL_FUNC) &_stringfish_get_string_type, 1},
    {"_stringfish_materialize", (DL_FUNC) &_stringfish_materialize, 1},
    {"_stringfish_sf_vector", (DL_FUNC) &_stringfish_sf_vector, 1},
    {"_stringfish_sf_assign", (DL_FUNC) &_stringfish_sf_assign, 3},
    {"_stringfish_sf_iconv", (DL_FUNC) &_stringfish_sf_iconv, 3},
    {"_stringfish_convert_to_sf", (DL_FUNC) &_stringfish_convert_to_sf, 1},
    {"_stringfish_sf_nchar", (DL_FUNC) &_stringfish_sf_nchar, 2},
    {"_stringfish_sf_substr", (DL_FUNC) &_stringfish_sf_substr, 3},
    {"_stringfish_c_sf_paste", (DL_FUNC) &_stringfish_c_sf_paste, 2},
    {"_stringfish_sf_collapse", (DL_FUNC) &_stringfish_sf_collapse, 2},
    {"_stringfish_sf_readLines", (DL_FUNC) &_stringfish_sf_readLines, 2},
    {"_stringfish_sf_grepl", (DL_FUNC) &_stringfish_sf_grepl, 3},
    {"_stringfish_sf_gsub", (DL_FUNC) &_stringfish_sf_gsub, 4},
    {"_stringfish_random_strings", (DL_FUNC) &_stringfish_random_strings, 4},
    {NULL, NULL, 0}
};

void init_stringfish(DllInfo* dll);
void sf_export_functions(DllInfo* dll);
RcppExport void R_init_stringfish(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    init_stringfish(dll);
    sf_export_functions(dll);
}
